{
  "_args": [
    [
      {
        "raw": "cordova-plugin-camera-preview",
        "scope": null,
        "escapedName": "cordova-plugin-camera-preview",
        "name": "cordova-plugin-camera-preview",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\ionic\\cameraCropDemo"
    ]
  ],
  "_from": "cordova-plugin-camera-preview",
  "_hasShrinkwrap": false,
  "_id": "cordova-plugin-camera-preview@0.11.0",
  "_location": "/cordova-plugin-camera-preview",
  "_nodeVersion": "9.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cordova-plugin-camera-preview_0.11.0_1558408405186_0.47955486980300766"
  },
  "_npmUser": {
    "name": "westonganger",
    "email": "weston@westonganger.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova-plugin-camera-preview",
    "scope": null,
    "escapedName": "cordova-plugin-camera-preview",
    "name": "cordova-plugin-camera-preview",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-plugin-camera-preview/-/cordova-plugin-camera-preview-0.11.0.tgz",
  "_shasum": "25810df1ae0e81a26c862c9cba5ebdef02eb6ee0",
  "_shrinkwrap": null,
  "_spec": "cordova-plugin-camera-preview",
  "_where": "D:\\ionic\\cameraCropDemo",
  "author": {
    "name": "Weston Ganger",
    "email": "westonganger@gmail.com",
    "url": "solidfoundationwebdev.com"
  },
  "bugs": {
    "url": "https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview/issues"
  },
  "dependencies": {},
  "description": "Cordova plugin that allows camera interaction from HTML code for showing camera preview below or on top of the HTML.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-n/SGWCkaIHWSYZMpcdf0TE9z4EJkZZKfmcK6VLMR2hQ0Pujss/mEfv9k6HbZbXbvkLcz3l7FCjaXTjtFIeBMFA==",
    "shasum": "25810df1ae0e81a26c862c9cba5ebdef02eb6ee0",
    "tarball": "https://registry.npmjs.org/cordova-plugin-camera-preview/-/cordova-plugin-camera-preview-0.11.0.tgz",
    "fileCount": 26,
    "unpackedSize": 338204,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc42zWCRA9TVsSAnZWagAAe3cP/3pU1kz8D6F67JmukMA6\nMn05LYjB9JODHn269iUJP8Jl9eoEofVxDgQZYzLWJ4jOlkkToQyYavfiN+hQ\niLjjKTqT4c093nf/vY8/en+XAfzSSf1cRZSB97ZnUYuczEyvpDCVlQG5k1b2\nxpnCPb0AL0fosoFDBIQLg+mUpc0uYcHKNbhKI87zaa8DDM4n5cytpTgfOycY\n6DHmRhcTk/gkURnEuU1SXCh2ccVMjfu/doSPVbP3Ke+0KsriUBWD/Pd6BUX5\n7cbIRFlrjxm8U+Cg65ci53vJRJCMJ4+rPWkrkSfuTdHJNtQfVILI5Ylyj+o6\nUVgpu+NzPrsVVjyP9S8bqRRMtQY2ipp/b+2NA03bE6rj0fb1Cbcn4Z+uCW7B\nHqPYeNA/+Q/X1YCwruVk9cf0tfAK6eXdGXA9nzwEg/w8Z8w3G6c+ozqQIdVS\ndETqD9647iCIs2xISZQQ4lV50a4jf5A9vVKFuYpWQA/duYGBEP/8xOzddb4i\nrndPzTTxqVjIXOBBeFXNwd3JBDHWTeO49ckhlEfrzB5m9/4k1ASWT6j+oSbF\nsmORq3O97AKbYjlT7kWyq2ejs73dotaJITqn8J+fU9pGY/+lJVIT+FgoARaW\nks/L1CzTlqIepFEsrlAXruigoVhC6o0mk+OwivkGk8DMpiGf7O5FZKXOt1eh\nba+q\r\n=fCcX\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "eabb7ad6fa4d701f4f44643fc3e228f534975f82",
  "homepage": "https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview",
  "keywords": [
    "cordova",
    "phonegap",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios",
    "android",
    "ios",
    "ionic",
    "camera",
    "cam",
    "camera-preview",
    "preview"
  ],
  "license": "Apache 2.0",
  "maintainers": [
    {
      "name": "westonganger",
      "email": "westonganger@gmail.com"
    }
  ],
  "name": "cordova-plugin-camera-preview",
  "optionalDependencies": {},
  "readme": "# Cordova Plugin Camera Preview\n<a href=\"https://badge.fury.io/js/cordova-plugin-camera-preview\" target=\"_blank\"><img height=\"21\" style='border:0px;height:21px;' border='0' src=\"https://badge.fury.io/js/cordova-plugin-camera-preview.svg\" alt=\"NPM Version\"></a>\n<a href='https://www.npmjs.org/package/cordova-plugin-camera-preview' target='_blank'><img height='21' style='border:0px;height:21px;' src='https://img.shields.io/npm/dt/cordova-plugin-camera-preview.svg?label=NPM+Downloads' border='0' alt='NPM Downloads' /></a>\n\nCordova plugin that allows camera interaction from Javascript and HTML\n\n**Releases are being kept up to date when appropriate. However, this plugin is under constant development. As such it is recommended to use master to always have the latest fixes & features.**\n\n**PR's are greatly appreciated. Maintainer(s) wanted.**\n\n# Features\n\n<ul>\n  <li>Start a camera preview from HTML code.</li>\n  <li>Maintain HTML interactivity.</li>\n  <li>Drag the preview box.</li>\n  <li>Set camera color effect.</li>\n  <li>Send the preview box to back of the HTML content.</li>\n  <li>Set a custom position for the camera preview box.</li>\n  <li>Set a custom size for the preview box.</li>\n  <li>Set a custom alpha for the preview box.</li>\n  <li>Set the focus mode, zoom, color effects, exposure mode, white balance mode and exposure compensation</li>\n  <li>Tap to focus</li>\n</ul>\n\n# Installation\n\nUse any one of the installation methods listed below depending on which framework you use.\n\nTo install the master version with latest fixes and features\n\n```\ncordova plugin add https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git\n\nionic cordova plugin add https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git\n\nmeteor add cordova:cordova-plugin-camera-preview@https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git#[latest_commit_id]\n\n<plugin spec=\"https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git\" source=\"git\" />\n```\n\nor if you want to use the last released version on npm\n\n```\ncordova plugin add cordova-plugin-camera-preview\n\nionic cordova plugin add cordova-plugin-camera-preview\n\nmeteor add cordova:cordova-plugin-camera-preview@X.X.X\n\n<gap:plugin name=\"cordova-plugin-camera-preview\" />\n```\n\n#### iOS Quirks\nIf you are developing for iOS 10+ you must also add the following to your config.xml\n\n```xml\n<config-file platform=\"ios\" target=\"*-Info.plist\" parent=\"NSCameraUsageDescription\" overwrite=\"true\">\n  <string>Allow the app to use your camera</string>\n</config-file>\n\n<!-- or for Phonegap -->\n\n<gap:config-file platform=\"ios\" target=\"*-Info.plist\" parent=\"NSCameraUsageDescription\" overwrite=\"true\">\n  <string>Allow the app to use your camera</string>\n</gap:config-file>\n```\n\n#### Android Quirks (older devices)\nWhen using the plugin for older devices, the camera preview will take the focus inside the app once initialized.\nIn order to prevent the app from closing when a user presses the back button, the event for the camera view is disabled.\nIf you still want the user to navigate, you can add a listener for the back event for the preview\n(see <code>[onBackButton](#onBackButton)</code>)\n\n\n\n# Methods\n\n### startCamera(options, [successCallback, errorCallback])\n\nStarts the camera preview instance.\n<br>\n\n<strong>Options:</strong>\nAll options stated are optional and will default to values here\n\n* `x` - Defaults to 0\n* `y` - Defaults to 0\n* `width` - Defaults to window.screen.width\n* `height` - Defaults to window.screen.height\n* `camera` - See <code>[CAMERA_DIRECTION](#camera_Settings.CameraDirection)</code> - Defaults to front camera\n* `toBack` - Defaults to false - Set to true if you want your html in front of your preview\n* `tapPhoto` - Defaults to true - Does not work if toBack is set to false in which case you use the takePicture method\n* `tapFocus` - Defaults to false - Allows the user to tap to focus, when the view is in the foreground\n* `previewDrag` - Defaults to false - Does not work if toBack is set to false\n* `storeToFile` - Defaults to false - Capture images to a file and return back the file path instead of returning base64 encoded data.\n* `disableExifHeaderStripping` - Defaults to false - **Android Only** - Disable automatic rotation of the image, and let the browser deal with it (keep reading on how to achieve it)\n\n```javascript\nlet options = {\n  x: 0,\n  y: 0,\n  width: window.screen.width,\n  height: window.screen.height,\n  camera: CameraPreview.CAMERA_DIRECTION.BACK,\n  toBack: false,\n  tapPhoto: true,\n  tapFocus: false,\n  previewDrag: false,\n  storeToFile: false,\n  disableExifHeaderStripping: false\n};\n\nCameraPreview.startCamera(options);\n```\n\nWhen setting the toBack to true, remember to add the style below on your app's HTML or body element:\n\n```css\nhtml, body, .ion-app, .ion-content {\n  background-color: transparent;\n}\n```\n\nWhen both tapFocus and tapPhoto are true, the camera will focus, and take a picture as soon as the camera is done focusing.\n\n### stopCamera([successCallback, errorCallback])\n\n<info>Stops the camera preview instance.</info><br/>\n\n```javascript\nCameraPreview.stopCamera();\n```\n\n### switchCamera([successCallback, errorCallback])\n\n<info>Switch between the rear camera and front camera, if available.</info><br/>\n\n```javascript\nCameraPreview.switchCamera();\n```\n\n### show([successCallback, errorCallback])\n\n<info>Show the camera preview box.</info><br/>\n\n```javascript\nCameraPreview.show();\n```\n\n### hide([successCallback, errorCallback])\n\n<info>Hide the camera preview box.</info><br/>\n\n```javascript\nCameraPreview.hide();\n```\n\n### takePicture(options, successCallback, [errorCallback])\n\n<info>Take the picture. If width and height are not specified or are 0 it will use the defaults. If width and height are specified, it will choose a supported photo size that is closest to width and height specified and has closest aspect ratio to the preview. The argument `quality` defaults to `85` and specifies the quality/compression value: `0=max compression`, `100=max quality`.</info><br/>\n\n```javascript\nCameraPreview.takePicture({width:640, height:640, quality: 85}, function(base64PictureData|filePath) {\n  /*\n    if the storeToFile option is false (the default), then base64PictureData is returned.\n    base64PictureData is base64 encoded jpeg image. Use this data to store to a file or upload.\n    Its up to the you to figure out the best way to save it to disk or whatever for your application.\n  */\n\n  /*\n    if the storeToFile option is set to true, then a filePath is returned. Note that the file\n    is stored in temporary storage, so you should move it to a permanent location if you\n    don't want the OS to remove it arbitrarily.\n  */\n\n  // One simple example is if you are going to use it inside an HTML img src attribute then you would do the following:\n  imageSrcData = 'data:image/jpeg;base64,' + base64PictureData;\n  $('img#my-img').attr('src', imageSrcData);\n});\n\n// OR if you want to use the default options.\n\nCameraPreview.takePicture(function(base64PictureData){\n  /* code here */\n});\n```\n\n### takeSnapshot(options, successCallback, [errorCallback])\n\n<info>Take snapshot of the camera preview. The resulting image will be the same size as specified in `startCamera` options. The argument `quality` defaults to `85` and specifies the quality/compression value: `0=max compression`, `100=max quality`.</info><br/>\n\n```javascript\nCameraPreview.takeSnapshot({quality: 85}, function(base64PictureData){\n  /*\n    base64PictureData is base64 encoded jpeg image. Use this data to store to a file or upload.\n  */\n\n  // One simple example is if you are going to use it inside an HTML img src attribute then you would do the following:\n  imageSrcData = 'data:image/jpeg;base64,' +base64PictureData;\n  $('img#my-img').attr('src', imageSrcData);\n});\n```\n\n### getSupportedFocusModes(cb, [errorCallback])\n\n<info>Get focus modes supported by the camera device currently started. Returns an array containing supported focus modes. See <code>[FOCUS_MODE](#camera_Settings.FocusMode)</code> for possible values that can be returned.</info><br/>\n\n```javascript\nCameraPreview.getSupportedFocusModes(function(focusModes){\n  focusModes.forEach(function(focusMode) {\n    console.log(focusMode + ', ');\n  });\n});\n```\n\n### setFocusMode(focusMode, [successCallback, errorCallback])\n\n<info>Set the focus mode for the camera device currently started.</info><br/>\n* `focusMode` - <code>[FOCUS_MODE](#camera_Settings.FocusMode)</code>\n\n```javascript\nCameraPreview.setFocusMode(CameraPreview.FOCUS_MODE.CONTINUOUS_PICTURE);\n```\n\n### getFocusMode(cb, [errorCallback])\n\n<info>Get the focus mode for the camera device currently started. Returns a string representing the current focus mode.</info>See <code>[FOCUS_MODE](#camera_Settings.FocusMode)</code> for possible values that can be returned.</info><br/>\n\n```javascript\nCameraPreview.getFocusMode(function(currentFocusMode){\n  console.log(currentFocusMode);\n});\n```\n\n### getSupportedFlashModes(cb, [errorCallback])\n\n<info>Get the flash modes supported by the camera device currently started. Returns an array containing supported flash modes. See <code>[FLASH_MODE](#camera_Settings.FlashMode)</code> for possible values that can be returned</info><br/>\n\n```javascript\nCameraPreview.getSupportedFlashModes(function(flashModes){\n  flashModes.forEach(function(flashMode) {\n    console.log(flashMode + ', ');\n  });\n});\n```\n\n### setFlashMode(flashMode, [successCallback, errorCallback])\n\n<info>Set the flash mode. See <code>[FLASH_MODE](#camera_Settings.FlashMode)</code> for details about the possible values for flashMode.</info><br/>\n\n```javascript\nCameraPreview.setFlashMode(CameraPreview.FLASH_MODE.ON);\n```\n\n### getFlashMode(cb, [errorCallback])\n\n<info>Get the flash mode for the camera device currently started. Returns a string representing the current flash mode.</info>See <code>[FLASH_MODE](#camera_Settings.FlashMode)</code> for possible values that can be returned</info><br/>\n\n```javascript\nCameraPreview.getFlashMode(function(currentFlashMode){\n  console.log(currentFlashMode);\n});\n```\n\n### getHorizontalFOV(cb, [errorCallback])\n\n<info>Get the Horizontal FOV for the camera device currently started. Returns a string of a float that is the FOV of the camera in Degrees. </info><br/>\n\n```javascript\nCameraPreview.getHorizontalFOV(function(getHorizontalFOV){\n  console.log(getHorizontalFOV);\n});\n```\n\n### getSupportedColorEffects(cb, [errorCallback])\n\n*Currently this feature is for Android only. A PR for iOS support would be happily accepted*\n\n<info>Get color modes supported by the camera device currently started. Returns an array containing supported color effects (strings). See <code>[COLOR_EFFECT](#camera_Settings.ColorEffect)</code> for possible values that can be returned.</info><br/>\n\n```javascript\nCameraPreview.getSupportedColorEffects(function(colorEffects){\n  colorEffects.forEach(function(color) {\n    console.log(color + ', ');\n  });\n});\n```\n\n\n### setColorEffect(colorEffect, [successCallback, errorCallback])\n\n<info>Set the color effect. See <code>[COLOR_EFFECT](#camera_Settings.ColorEffect)</code> for details about the possible values for colorEffect.</info><br/>\n\n```javascript\nCameraPreview.setColorEffect(CameraPreview.COLOR_EFFECT.NEGATIVE);\n```\n\n### setZoom(zoomMultiplier, [successCallback, errorCallback])\n\n<info>Set the zoom level for the camera device currently started. zoomMultipler option accepts an integer. Zoom level is initially at 1</info><br/>\n\n```javascript\nCameraPreview.setZoom(2);\n```\n\n### getZoom(cb, [errorCallback])\n\n<info>Get the current zoom level for the camera device currently started. Returns an integer representing the current zoom level.</info><br/>\n\n```javascript\nCameraPreview.getZoom(function(currentZoom){\n  console.log(currentZoom);\n});\n```\n\n### getMaxZoom(cb, [errorCallback])\n\n<info>Get the maximum zoom level for the camera device currently started. Returns an integer representing the manimum zoom level.</info><br/>\n\n```javascript\nCameraPreview.getMaxZoom(function(maxZoom){\n  console.log(maxZoom);\n});\n```\n\n### getSupportedWhiteBalanceModes(cb, [errorCallback])\n\n<info>Returns an array with supported white balance modes for the camera device currently started. See <code>[WHITE_BALANCE_MODE](#camera_Settings.WhiteBalanceMode)</code> for details about the possible values returned.</info><br/>\n\n```javascript\nCameraPreview.getSupportedWhiteBalanceModes(function(whiteBalanceModes){\n  console.log(whiteBalanceModes);\n});\n```\n\n### getWhiteBalanceMode(cb, [errorCallback])\n\n<info>Get the curent white balance mode of the camera device currently started. See <code>[WHITE_BALANCE_MODE](#camera_Settings.WhiteBalanceMode)</code> for details about the possible values returned.</info><br/>\n\n```javascript\nCameraPreview.getWhiteBalanceMode(function(whiteBalanceMode){\n  console.log(whiteBalanceMode);\n});\n```\n### setWhiteBalanceMode(whiteBalanceMode, [successCallback, errorCallback])\n\n<info>Set the white balance mode for the camera device currently started. See <code>[WHITE_BALANCE_MODE](#camera_Settings.WhiteBalanceMode)</code> for details about the possible values for whiteBalanceMode.</info><br/>\n\n```javascript\nCameraPreview.setWhiteBalanceMode(CameraPreview.WHITE_BALANCE_MODE.CLOUDY_DAYLIGHT);\n```\n\n### getExposureModes(cb, [errorCallback])\n\n<info>Returns an array with supported exposure modes for the camera device currently started. See <code>[EXPOSURE_MODE](#camera_Settings.ExposureMode)</code> for details about the possible values returned.</info><br/>\n\n```javascript\nCameraPreview.getExposureModes(function(exposureModes){\n  console.log(exposureModes);\n});\n```\n\n### getExposureMode(cb, [errorCallback])\n\n<info>Get the curent exposure mode of the camera device currently started. See <code>[EXPOSURE_MODE](#camera_Settings.ExposureMode)</code> for details about the possible values returned.</info><br/>\n\n```javascript\nCameraPreview.getExposureMode(function(exposureMode){\n  console.log(exposureMode);\n});\n```\n### setExposureMode(exposureMode, [successCallback, errorCallback])\n\n<info>Set the exposure mode for the camera device currently started. See <code>[EXPOSURE_MODE](#camera_Settings.ExposureMode)</code> for details about the possible values for exposureMode.</info><br/>\n\n```javascript\nCameraPreview.setExposureMode(CameraPreview.EXPOSURE_MODE.CONTINUOUS);\n```\n### getExposureCompensationRange(cb, [errorCallback])\n\n<info>Get the minimum and maximum exposure compensation for the camera device currently started. Returns an object containing min and max integers.</info><br/>\n\n```javascript\nCameraPreview.getExposureCompensationRange(function(expoxureRange){\n  console.log(\"min: \" + exposureRange.min);\n  console.log(\"max: \" + exposureRange.max);\n});\n```\n### getExposureCompensation(cb, [errorCallback])\n\n<info>Get the current exposure compensation for the camera device currently started. Returns an integer representing the current exposure compensation.</info><br/>\n\n```javascript\nCameraPreview.getExposureCompensation(function(expoxureCompensation){\n  console.log(exposureCompensation);\n});\n```\n### setExposureCompensation(exposureCompensation, [successCallback, errorCallback])\n\n<info>Set the exposure compensation for the camera device currently started. exposureCompensation accepts an integer. if exposureCompensation is lesser than the minimum exposure compensation, it is set to the minimum. if exposureCompensation is greater than the maximum exposure compensation, it is set to the maximum. (see getExposureCompensationRange() to get the minumum an maximum exposure compensation).</info><br/>\n\n```javascript\nCameraPreview.setExposureCompensation(-2);\nCameraPreview.setExposureCompensation(3);\n```\n\n### setPreviewSize([dimensions, successCallback, errorCallback])\n\n<info>Change the size of the preview window.</info><br/>\n\n```javascript\nCameraPreview.setPreviewSize({width: window.screen.width, height: window.screen.height});\n```\n\n### getSupportedPictureSizes(cb, [errorCallback])\n\n```javascript\nCameraPreview.getSupportedPictureSizes(function(dimensions){\n  // note that the portrait version, width and height swapped, of these dimensions are also supported\n  dimensions.forEach(function(dimension) {\n    console.log(dimension.width + 'x' + dimension.height);\n  });\n});\n```\n\n### getCameraCharacteristics(cb, [errorCallback])\n\n<info>Get the characteristics of all available cameras. Returns a JSON object representing the characteristics of all available cameras.</info><br/>\n\n```javascript\nCameraPreview.getCameraCharacteristics(function(characteristics){\n  console.log(characteristics);\n});\n```\n\nExample Characteristics:\n\n```\n{\n  \"CAMERA_CHARACTERISTICS\": [\n    {\n      \"INFO_SUPPORTED_HARDWARE_LEVEL\": 1,\n      \"LENS_FACING\": 1,\n      \"SENSOR_INFO_PHYSICAL_SIZE_WIDTH\": 5.644999980926514,\n      \"SENSOR_INFO_PHYSICAL_SIZE_HEIGHT\": 4.434999942779541,\n      \"SENSOR_INFO_PIXEL_ARRAY_SIZE_WIDTH\": 4032,\n      \"SENSOR_INFO_PIXEL_ARRAY_SIZE_HEIGHT\": 3024,\n      \"LENS_INFO_AVAILABLE_FOCAL_LENGTHS\": [\n        {\n          \"FOCAL_LENGTH\": 4.199999809265137\n        }\n      ]\n    },\n\n    {\n      \"INFO_SUPPORTED_HARDWARE_LEVEL\": 0,\n      \"LENS_FACING\": 0,\n      \"SENSOR_INFO_PHYSICAL_SIZE_WIDTH\": 3.494999885559082,\n      \"SENSOR_INFO_PHYSICAL_SIZE_HEIGHT\": 2.625999927520752,\n      \"SENSOR_INFO_PIXEL_ARRAY_SIZE_WIDTH\": 2608,\n      \"SENSOR_INFO_PIXEL_ARRAY_SIZE_HEIGHT\": 1960,\n      \"LENS_INFO_AVAILABLE_FOCAL_LENGTHS\": [\n        {\n          \"FOCAL_LENGTH\": 2.0999999046325684\n        }\n      ]\n    }\n  ]\n}\n```\n\n### tapToFocus(xPoint, yPoint, [successCallback, errorCallback])\n\n<info>Set specific focus point. Note, this assumes the camera is full-screen.</info><br/>\n\n```javascript\nlet xPoint = event.x;\nlet yPoint = event.y\nCameraPreview.tapToFocus(xPoint, yPoint);\n```\n\n### onBackButton(successCallback, [errorCallback])\n\n<info>Callback event for the back button tap</info><br/>\n\n```javascript\nCameraPreview.onBackButton(function() {\n  console.log('Back button pushed');\n});\n```\n\n### getBlob(url, [successCallback, errorCallback])\n\nWhen working with local files you may want to display those on certain containers like canvas,\ngiven that file:// is not always a valid url type, you need to first convert it explicitly to\na blob, before you push it further into the display side. The function getBlob will do the\nproper conversion for you, and if succedeed will pass the content on it's callback function as\nfirst argument.\n\n```javascript\n\nfunction displayImage(content) {\n  var ctx = $(\"canvas\").getContext('2d');\n\n  img.onload = function(){\n    ctx.drawImage(img, 0, 0)\n  }\n\n  img.src = URL.createObjectURL(blob);\n}\n\nfunction takePicture() {\n  CameraPreview.takePicture({width: app.dimension.width, height: app.dimension.height}, function(data){\n    if (cordova.platformId === 'android') {\n      CameraPreview.getBlob('file://' + data, function(image) {\n        displayImage(image);\n      });\n    } else {\n      displayImage('data:image/jpeg;base64,' + data);\n    }\n  });\n}\n```\n\n# storeToFile\n\nWhen capturing large images you may want them to be stored into a file instead of having them\nbase64 enconded, as enconding at least on Android is very expensive. With the feature storeToFile enabled\nthe plugin will capture the image into a temporary file inside the application temporary cache (the same\nplace where Cordova will extract your assets). This method is better used with *disableExifHeaderStripping* \nto get the best possible performance.\n\n\nExample:\n\n```html\n<script src=\"https://raw.githubusercontent.com/blueimp/JavaScript-Load-Image/master/js/load-image.all.min.js\"></script>\n\n<p><div id=\"originalPicture\" style=\"width: 100%\"></div></p>\n```\n\n```javascript\nlet options = {\n  x: 0,\n  y: 0,\n  width: window.screen.width,\n  height: window.screen.height,\n  camera: CameraPreview.CAMERA_DIRECTION.BACK,\n  toBack: false,\n  tapPhoto: true,\n  tapFocus: false,\n  previewDrag: false,\n  disableExifHeaderStripping: true,\n  storeToFile: true\n};\n....\n\nfunction gotRotatedCanvas(canvasimg) {\n  var displayCanvas = $('canvas#display-canvas');\n  loadImage.scale(canvasimg, function(img){\n    displayCanvas.drawImage(img)\n  }, {\n    maxWidth: displayCanvas.width,\n    maxHeight: displayCanvas.height\n  });\n}\n\nCameraPreview.getSupportedPictureSizes(function(dimensions){\n  dimensions.sort(function(a, b){\n    return (b.width * b.height - a.width * a.height);\n  });\n  var dimension = dimensions[0];\n  CameraPreview.takePicture({width:dimension.width, height:dimension.height, quality: 85}, function(path){\n    var image = 'file://' + path;\n    let holder = document.getElementById('originalPicture');\n    let width = holder.offsetWidth;\n    loadImage(\n      image,\n      function(canvas) {\n        holder.innerHTML = \"\";\n        if (app.camera === 'front') {\n          // front camera requires we flip horizontally\n          canvas.style.transform = 'scale(1, -1)';\n        }\n        holder.appendChild(canvas);\n      },\n      {\n        maxWidth: width,\n        orientation: true,\n        canvas: true\n      }\n    );\n  });\n});\n```\n\n## disableExifHeaderStripping\n\nIf you want to capture large images you will notice in Android that performace is very bad, in those cases you can set\nthis flag, and add some extra Javascript/HTML to get a proper display of your captured images without risking your application speed.\n\nExample:\n\n```html\n<script src=\"https://raw.githubusercontent.com/blueimp/JavaScript-Load-Image/master/js/load-image.all.min.js\"></script>\n\n<p><div id=\"originalPicture\" style=\"width: 100%\"></div></p>\n```\n\n```javascript\nlet options = {\n  x: 0,\n  y: 0,\n  width: window.screen.width,\n  height: window.screen.height,\n  camera: CameraPreview.CAMERA_DIRECTION.BACK,\n  toBack: false,\n  tapPhoto: true,\n  tapFocus: false,\n  previewDrag: false,\n  disableExifHeaderStripping: true\n};\n....\n\nfunction gotRotatedCanvas(canvasimg) {\n  var displayCanvas = $('canvas#display-canvas');\n  loadImage.scale(canvasimg, function(img){\n    displayCanvas.drawImage(img)\n  }, {\n    maxWidth: displayCanvas.width,\n    maxHeight: displayCanvas.height\n  });\n}\n\nCameraPreview.getSupportedPictureSizes(function(dimensions){\n  dimensions.sort(function(a, b){\n    return (b.width * b.height - a.width * a.height);\n  });\n  var dimension = dimensions[0];\n  CameraPreview.takePicture({width:dimension.width, height:dimension.height, quality: 85}, function(base64PictureData){\n    /*\n      base64PictureData is base64 encoded jpeg image. Use this data to store to a file or upload.\n      Its up to the you to figure out the best way to save it to disk or whatever for your application.\n    */\n\n    var image = 'data:image/jpeg;base64,' + imgData;\n    let holder = document.getElementById('originalPicture');\n    let width = holder.offsetWidth;\n    loadImage(\n      image,\n      function(canvas) {\n        holder.innerHTML = \"\";\n        if (app.camera === 'front') {\n          // front camera requires we flip horizontally\n          canvas.style.transform = 'scale(1, -1)';\n        }\n        holder.appendChild(canvas);\n      },\n      {\n        maxWidth: width,\n        orientation: true,\n        canvas: true\n      }\n    );\n  });\n```\n\n# Settings\n\n<a name=\"camera_Settings.FocusMode\"></a>\n\n### FOCUS_MODE\n\n<info>Focus mode settings:</info><br/>\n\n| Name | Type | Default | Note |\n| --- | --- | --- | --- |\n| FIXED | string | fixed |  |\n| AUTO | string | auto |  |\n| CONTINUOUS | string | continuous | IOS Only |\n| CONTINUOUS_PICTURE | string | continuous-picture | Android Only |\n| CONTINUOUS_VIDEO | string | continuous-video | Android Only |\n| EDOF | string | edof | Android Only |\n| INFINITY | string | infinity | Android Only |\n| MACRO | string | macro | Android Only |\n\n<a name=\"camera_Settings.FlashMode\"></a>\n\n### FLASH_MODE\n\n<info>Flash mode settings:</info><br/>\n\n| Name | Type | Default | Note |\n| --- | --- | --- | --- |\n| OFF | string | off |  |\n| ON | string | on |  |\n| AUTO | string | auto |  |\n| RED_EYE | string | red-eye | Android Only |\n| TORCH | string | torch |  |\n\n<a name=\"camera_Settings.CameraDirection\"></a>\n\n### CAMERA_DIRECTION\n\n<info>Camera direction settings:</info><br/>\n\n| Name | Type | Default |\n| --- | --- | --- |\n| BACK | string | back |\n| FRONT | string | front |\n\n<a name=\"camera_Settings.ColorEffect\"></a>\n\n### COLOR_EFFECT\n\n<info>Color effect settings:</info><br/>\n\n| Name | Type | Default | Note |\n| --- | --- | --- | --- |\n| AQUA | string | aqua | Android Only |\n| BLACKBOARD | string | blackboard | Android Only |\n| MONO | string | mono | |\n| NEGATIVE | string | negative | |\n| NONE | string | none | |\n| POSTERIZE | string | posterize | |\n| SEPIA | string | sepia | |\n| SOLARIZE | string | solarize | Android Only |\n| WHITEBOARD | string | whiteboard | Android Only |\n\n<a name=\"camera_Settings.ExposureMode\"></a>\n\n### EXPOSURE_MODE\n\n<info>Exposure mode settings:</info><br/>\n\n| Name | Type | Default | Note |\n| --- | --- | --- | --- |\n| AUTO | string | auto | IOS Only |\n| CONTINUOUS | string | continuous | |\n| CUSTOM | string | custom | |\n| LOCK | string | lock | IOS Only |\n\nNote: Use AUTO to allow the device automatically adjusts the exposure once and then changes the exposure mode to LOCK.\n\n<a name=\"camera_Settings.WhiteBalanceMode\"></a>\n\n### WHITE_BALANCE_MODE\n\n<info>White balance mode settings:</info><br/>\n\n| Name | Type | Default | Note |\n| --- | --- | --- | --- |\n| LOCK | string | lock | |\n| AUTO | string | auto | |\n| CONTINUOUS | string | continuous | IOS Only |\n| INCANDESCENT | string | incandescent | |\n| CLOUDY_DAYLIGHT | string | cloudy-daylight | |\n| DAYLIGHT | string | daylight | |\n| FLUORESCENT | string | fluorescent | |\n| SHADE | string | shade | |\n| TWILIGHT | string | twilight | |\n| WARM_FLUORESCENT | string | warm-fluorescent | |\n\n# IOS Quirks\nIt is not possible to use your computers webcam during testing in the simulator, you must device test.\n\n# Customize Android Support Library versions (Android only)\nThe default `ANDROID_SUPPORT_LIBRARY_VERSION` is set to `26+`.\nIf you need a different version, add argument `--variable ANDROID_SUPPORT_LIBRARY_VERSION=\"{version}\"`.\n\nOr edit `config.xml` with following,\n\n```xml\n<plugin name=\"cordova-plugin-camera-preview\" spec=\"X.X.X\">\n  <variable name=\"ANDROID_SUPPORT_LIBRARY_VERSION\" value=\"26+\" />\n</plugin>\n```\n\n# Sample App\n\n<a href=\"https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview-sample-app\">cordova-plugin-camera-preview-sample-app</a> for a complete working Cordova example for Android and iOS platforms.\n\n# Screenshots\n\n<img src=\"https://raw.githubusercontent.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview/master/img/android-1.png\"/> <img hspace=\"20\" src=\"https://raw.githubusercontent.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview/master/img/android-2.png\"/>\n\n# Credits\n\nMaintained by [Weston Ganger](https://westonganger.com) - [@westonganger](https://github.com/westonganger)\n\nCreated by Marcel Barbosa Pinto [@mbppower](https://github.com/mbppower)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git"
  },
  "typings": "typescript/CameraPreview.d.ts",
  "version": "0.11.0"
}
